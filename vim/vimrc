" OPTIONS
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim
set exrc                        " load .vimrc in current directory if it exists
set autowrite                   " when calling :make
set autoread                    " after an external change but no change in vim
set secure                      " secure mode
set number
set norelativenumber
set cursorline
set laststatus=2
set wildmode=longest,list,full  " command menu
set visualbell                  " blink, don't beep
set signcolumn=yes
set path+="**"
set encoding=utf-8
set wrap                        " wrap and display stuff
set textwidth=110
set formatoptions=cqrn1
set tabstop=4                   " tabs
set shiftwidth=4
set softtabstop=4
set expandtab
set mouse=a                     " enable mouse
set ttymouse=xterm2             " make it work in tmux
set scrolloff=3                 " 3 lines margin
set matchpairs+=<:>             " use % to jump between pairs
packadd! matchit                " load matchit plugin
set listchars=tab:→\ ,trail:· ",eol:↲
set list
set splitright                  " for :vsplit
set splitbelow                  " for :split
set grepprg=rg\ --vimgrep\ --smart-case\ --follow
set undofile                    " persistent undo
silent !mkdir -p ~/.vim/{backup,swap,undo} > /dev/null 2>&1
set backupdir=~/.vim/backup
set directory=~/.vim/swap
set undodir=~/.vim/undo
set hlsearch                    " search settings
set ignorecase
set smartcase
set showmatch
set foldmethod=marker           " fold markers

" PLUGINS
if empty(glob('~/.vim/autoload/plug.vim'))
    silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'                                   " Git
Plug 'tpope/vim-surround'                                   " Surround stuff
Plug 'tpope/vim-commentary'                                 " Comment stuff
Plug 'tpope/vim-repeat'                                     " Repeat previous plugins commands
Plug 'tpope/vim-abolish'                                    " Abolish(abbrev) Subvert(substitution) Coerce (crs, crc, etc.)
Plug 'tpope/vim-eunuch'                                     " UNIX shell commands sugar
Plug 'matze/vim-move'                                       " Move lines or selections with <A-h/j/k/l>
Plug 'airblade/vim-gitgutter'                               " Git info in signcolumn
Plug 'preservim/nerdtree'                                   " NERDTree
Plug 'sheerun/vim-polyglot'                                 " Best syntax and indentation support
Plug 'vim-airline/vim-airline'                              " Status line...
Plug 'vim-airline/vim-airline-themes'                       " ...and themes
Plug 'sainnhe/gruvbox-material'                             " Colorschemes
Plug 'sainnhe/sonokai'
Plug 'sainnhe/everforest'
Plug 'luochen1990/rainbow'                                  " Rainbow parentheses
Plug 'Yggdroot/indentLine'                                  " Indentation guides
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }         " FZF
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}             " Completion
Plug 'wellle/tmux-complete.vim'                             " Complete from tmux
Plug 'pakutoma/toggle-terminal'                             " Toggle terminal
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }          " Go commands
Plug 'psf/black', { 'branch': 'stable' }                    " Black formatter for Python
Plug 'habamax/vim-asciidoctor'                              " Asciidoctor
Plug 'cdelledonne/vim-cmake'                                " CMake
Plug 'alvan/vim-closetag'                                   " Close HTML tags
Plug 'klimeryk/vim-monkey-c'                                " Monkey C (Garmin)
Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }   " Display colors next to #rgb
Plug 'ryanoasis/vim-devicons'                               " Nice icons
Plug 'pantharshit00/vim-prisma'                             " Prisma syntax hi
call plug#end()

" MAPPINGS
"" leader
let mapleader=","
" very magic search
nnoremap / /\v
vnoremap / /\v
" clear search
noremap <leader><space> :let @/=''<CR>
" move up/down display lines (rather than physical lines)
nnoremap j gj
nnoremap k gk
" toggle on/off listchars
noremap <leader>l :set list!<CR>
" keep selection when indenting
vnoremap < <gv
vnoremap > >gv
" toggle relative numbers
nnoremap <leader>nn :set number<CR>:let &relativenumber = (&relativenumber == 1 ? 0 : 1)<CR>
" vimrc
nnoremap <leader>ev :split $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
" move one line down/up
noremap - ddp
noremap + ddkP
" auto }
inoremap {<CR>  {<CR>}<Esc>O
" replace spaces by tabs
noremap <leader>stt :s/    /\t/g<CR>:let @/=''<CR>
" terminal
tnoremap <silent> <C-@> <C-w>:ToggleTerminal<CR>
nnoremap <silent> <C-@> :ToggleTerminal<CR>
nnoremap <leader>tb :botright terminal ++rows=10<CR>
tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"
" forget thoses keys!!
nnoremap <up>       <nop>
nnoremap <down>     <nop>
nnoremap <right>    <nop>
nnoremap <left>     <nop>
" toggle background
noremap <leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" navigate between buffers
noremap <leader><Tab> :bn<CR>
noremap <S-Tab> :bp<CR>
" NERDTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
" fzf find files, mappings, buffers etc.
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fm :Maps<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>ft :Tags<CR>
" Coc
nnoremap <leader>, :CocConfig<CR>
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd :<C-u>call CocActionAsync('jumpDefinition')<CR>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>cf <Plug>(coc-format)
vmap <leader>cf <Plug>(coc-format-selected)
nmap <leader>o :CocList outline<CR>
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" ABBREVIATIONS
iabbrev adn     and
iabbrev teh     the
iabbrev unint   uint
iabbrev conts   const
cnoreabbrev vds vertical diffsplit

" AUTOCOMMANDS
"" templates
augroup templates
    au!
    autocmd BufNewFile *.* silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:e")
augroup END
"" vimrc
augroup vimrc
    au!
    autocmd! BufWritePost $MYVIMRC source $MYVIMRC
augroup END
"" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
"" NERDTRee auto open and auto close
" augroup nerd
"     au!
"     autocmd VimEnter * NERDTree | wincmd p " focus on previous window
"     autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif " close the tab if NERDTree is the only window remaining in it
" augroup END

" LOOKS
set termguicolors
set background=dark
colorscheme sonokai
let g:airline_theme = 'sonokai'
let g:airline_powerline_fonts = 1
let g:airline_section_z = '%p%% %l:%c'
let g:airline#extensions#tabline#enabled = 1

" CONFIGURE PLUGINS
let g:black_linelength = 100
let g:toggle_terminal#command = 'bash'
let g:Hexokinase_highlighters = [ 'sign_column', 'backgroundfull' ]
let g:Hexokinase_optOutPatterns = [ 'colour_names' ]
let g:indentLine_char = '│'
let g:rainbow_active = 1
let g:rainbow_conf = {
            \ 'guifgs': [ '#76cce0', '#b39df3', '#fc5d7c', '#f39660', ],
            \ 'separately': { 'nerdtree' : 0 }
            \ }
let NERDTreeShowHidden = 1
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.jsx,*.tsx"
let g:vim_markdown_conceal = 0

" Fixes
"" Get rid of the [ ] around icons in NERDTree
if exists("g:loaded_webdevicons")
    call webdevicons#refresh()
endif
